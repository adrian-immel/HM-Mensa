name: Build and Publish Docker Image

on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' branch
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

env:
  # The name of your Docker image on GHCR will be ghcr.io/<OWNER>/<REPOSITORY_NAME>
  # For example: ghcr.io/your-github-username/your-repo-name
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read # Allow checkout of the repository code
  packages: write # Allow publishing of packages to GHCR

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # This action sets up Buildx, a Docker CLI plugin for extended build capabilities.
        # It's recommended for better performance and features like caching.
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        # This action logs into a Docker registry. For GHCR, use ghcr.io.
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # The GitHub actor (username) who triggered the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # The GITHUB_TOKEN automatically provided by GitHub Actions

      - name: Extract metadata (tags, labels) for Docker
        # This action extracts useful metadata from the Git context (like branch, commit SHA)
        # and generates appropriate Docker image tags and labels.
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch # e.g., main
            type=sha,prefix=sha- # e.g., sha-abcdef1
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }} # Only tag 'latest' on the default branch (e.g., main)
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            # Add any other standard labels you might need, e.g.:
            # org.opencontainers.image.licenses=MIT
            # org.opencontainers.image.authors=${{ github.actor }}

      - name: Build and push Docker image
        # This action builds and optionally pushes Docker images.
        uses: docker/build-push-action@v5
        with:
          context: . # Path to the build context (where your Dockerfile is)
          push: true # Set to 'true' to push the image to the registry
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata action
          cache-from: type=gha # Enable caching for faster builds using GitHub Actions cache
          cache-to: type=gha,mode=max # Store build cache in GitHub Actions cache
          # build-args: | # Uncomment and add if your Dockerfile uses ARG instructions
          #   MY_ARG=value
          # file: ./Dockerfile # Uncomment if your Dockerfile is not named 'Dockerfile' or is not in the root
